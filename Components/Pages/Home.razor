@page "/"
@using LanguageHelper.Modals
@inject FolderDbService DbService
@inject NavigationManager NavManager
@inject IStringLocalizer<Translations> Trans

<div class="flex flex-row justify-center items-center border-dashed border-2 border-blue-500 p-3 mx-auto mt-20 w-80 h-16 sm:hidden rounded-lg bg-blue-50 dark:bg-blue-900 transition-all duration-300">
    <svg class="w-8 h-8 text-gray-800 dark:text-white" viewBox="0 0 16 16" fill="currentColor"
         xmlns="http://www.w3.org/2000/svg">
        <path d="M0 1H5L8 3H13V5H3.7457L2.03141 11H4.11144L5.2543 7H16L14 14H0V1Z"/>
    </svg>
    <button @onclick="OpenWindow"
            class="bg-transparent text-lg ml-4 font-semibold text-gray-900 dark:text-white transition-all duration-300">
        @Trans["HomeCreateFolder"]
    </button>
</div>

<div class="mt-6 px-4 space-y-4">
    @foreach (var folder in _folderNames)
    {
        <div class="relative bg-gradient-to-br from-gray-200 to-gray-100 dark:from-slate-800 dark:to-slate-700 shadow-md rounded-lg p-4 flex justify-between items-center gap-4 cursor-pointer transition-transform duration-300 scale-95 hover:scale-100">

            <!-- Move onClick here, only wrapping the folder icon + name -->
            <div @onclick="() => GoToDetails(folder.Id)" class="flex items-center">
                <svg class="w-8 h-8 mr-4 text-indigo-600 dark:text-indigo-400" viewBox="0 0 16 16" fill="currentColor"
                     xmlns="http://www.w3.org/2000/svg">
                    <path d="M0 1H5L8 3H13V5H3.7457L2.03141 11H4.11144L5.2543 7H16L14 14H0V1Z"/>
                </svg>
                <span class="text-xl font-extrabold text-slate-900 dark:text-gray-200">
                    @folder.Name
                </span>
            </div>

            <!-- Three Dots Button -->
            <div class="relative">
                <button @onclick="() => ToggleMenu(folder.Id)" class="p-2 rounded-full bg-gray-100 dark:bg-slate-700">
                    <svg class="w-6 h-6 text-gray-600 dark:text-gray-400" viewBox="0 0 24 24" fill="currentColor">
                        <circle cx="5" cy="12" r="2"/>
                        <circle cx="12" cy="12" r="2"/>
                        <circle cx="19" cy="12" r="2"/>
                    </svg>
                </button>

                <!-- Dropdown Menu -->
                @if (_openMenuId == folder.Id)
                {
                    <div class="absolute right-0 bg-gray-100 dark:bg-slate-700 shadow-lg rounded-lg py-2 w-64 z-10 transition-all transform scale-95 hover:scale-100">
                        <button @onclick="() => DeleteFolder(folder.Id)"
                                class="block w-full text-left px-4 py-2 text-red-600 dark:text-red-400">
                            @Trans["DeleteFolderMessage"]
                        </button>
                    </div>
                }
            </div>
        </div>

    }
</div>

@if (_isWindowOpen)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex justify-center items-center p-4 animate-fade-in">
        <div class="bg-white dark:bg-slate-800 p-8 rounded-xl shadow-xl w-full sm:w-96 max-w-lg">
            <h2 class="text-xl font-extrabold mb-6 text-center text-slate-900 dark:text-gray-100 font-mono">
                @Trans["HomeCreateFolder"]
            </h2>
            <input placeholder="@Trans["HomeCreateFolderPopUpPlaceholder"]"
                   autofocus
                   @bind="_newFolderName"
                   @oninput="ClearErrorMessage"
                   class="border border-gray-300 dark:border-gray-600 rounded-lg p-3 w-full mb-2 text-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none transition-all duration-300"/>
            <span class="text-red-600 italic mb-6 block">
                @ErrorMessage
            </span>
            <div class="flex justify-between">
                <button @onclick="CreateFolder"
                        class="bg-indigo-500 dark:bg-indigo-700 text-white px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105">
                    @Trans["HomeCreateFolderPopUp"]
                </button>
                <button @onclick="OpenWindow"
                        class="bg-red-500 dark:bg-red-700 text-white px-6 py-3 rounded-lg transition-all duration-300 transform hover:scale-105">
                    @Trans["HomeCreateFolderPopUpClose"]
                </button>
            </div>
        </div>
    </div>
}

@code {
    readonly List<FolderItems> _folderNames = [];
    private string? ErrorMessage { get; set; } = string.Empty;
    private bool _isWindowOpen;
    private int? _openMenuId = null;
    private string _newFolderName = string.Empty;

    void ClearErrorMessage()
    {
        ErrorMessage = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        _folderNames.AddRange(await DbService.GetFoldersAsync());
    }

    void OpenWindow()
    {
        _isWindowOpen = !_isWindowOpen;
    }

    void ToggleMenu(int folderId)
    {
        _openMenuId = _openMenuId == folderId ? null : folderId;
    }

    private async Task CreateFolder()
    {
        if (string.IsNullOrEmpty(_newFolderName))
        {
            ErrorMessage = Trans["NewFolderError"];
            return;
        }
        
        ErrorMessage = string.Empty;
        await DbService.CreateFolderAsync(_newFolderName);
        _folderNames.Clear();
        _folderNames.AddRange(await DbService.GetFoldersAsync());

        _newFolderName = string.Empty;
        _isWindowOpen = false;
    }

    private async Task DeleteFolder(int folderId)
    {
        await DbService.DeleteFolderAsync(folderId);
        _folderNames.RemoveAll(f => f.Id == folderId);
        _openMenuId = null;
        StateHasChanged();
    }

    private void GoToDetails(int folderId)
    {
        NavManager.NavigateTo($"/folder/{folderId}");
    }

}
