@page "/display-all"
@inject FolderDbService DbService

<!-- Top Navigation Tabs -->
<div class="w-full bg-gray-900 text-white flex justify-around items-center h-12 shadow-lg rounded-b-lg">
    <button class="@GetTabStyle(true)" @onclick="DisplayAllStar">
        ⭐ Gelernt
    </button>
    <button class="@GetTabStyle(false)" @onclick="DisplayAllNotStar">
        📖 Zu lernen
    </button>
</div>

<!-- Vocabulary List -->
<div class="w-11/12 mx-auto mt-6">
    <ul class="space-y-4">
        @foreach (var vocab in _filteredVocabulary)
        {
            <li @key="vocab.Id"
                class="bg-white dark:bg-gray-800 p-5 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-500 transform @(vocab.FadingOut ? "scale-95 opacity-0" : "scale-100 opacity-100")">
                
                <!-- Star Button -->
                <div class="absolute top-2 right-2">
                    <button @onclick="() => ToggleLearnedStatus(vocab)"
                            class="transition-all duration-300 transform hover:scale-110">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-7 h-7"
                             fill="@(vocab.Learned ? "yellow" : "none")" viewBox="0 0 24 24"
                             stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                  d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/>
                        </svg>
                    </button>
                </div>

                <!-- Word and Translation -->
                <div class="text-center">
                    <span class="font-extrabold text-xl text-gray-900 dark:text-gray-100 block">@vocab.Word</span>
                    <span class="italic text-gray-600 dark:text-gray-300 block mt-1">@vocab.Translation</span>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    private bool _isStarTabActive = true;
    private List<VocabularyItems> _filteredVocabulary = [];

    protected override async Task OnInitializedAsync()
    {
        var starVocab = await DbService.GetAllStarVocabularyAsync();
        _filteredVocabulary = new List<VocabularyItems>(starVocab);
    }

    async Task DisplayAllStar()
    {
        _isStarTabActive = true;
        var starVocab = await DbService.GetAllStarVocabularyAsync();
        _filteredVocabulary = new List<VocabularyItems>(starVocab);
    }

    async Task DisplayAllNotStar()
    {
        _isStarTabActive = false;
        var notStarVocab = await DbService.GetAllNotStarVocabularyAsync();
        _filteredVocabulary = new List<VocabularyItems>(notStarVocab);
    }

    private async Task ToggleLearnedStatus(VocabularyItems vocab)
    {
        vocab.FadingOut = true;
        StateHasChanged();
        await Task.Delay(400);

        vocab.Learned = !vocab.Learned;
        await DbService.ToggleLearnedStatusAsync(vocab.Id, vocab.Learned);

        _filteredVocabulary = vocab.Learned
            ? await DbService.GetAllNotStarVocabularyAsync()
            : await DbService.GetAllStarVocabularyAsync();

        StateHasChanged();
    }

    private string GetTabStyle(bool isStarTab)
    {
        return isStarTab == _isStarTabActive
            ? "flex-1 text-center py-3 bg-blue-600 text-white font-semibold rounded-b-lg shadow-md transition-all duration-300"
            : "flex-1 text-center py-3 hover:bg-blue-700 focus:bg-blue-700 text-gray-300 dark:text-gray-400 transition-all duration-300";
    }
}